# Generated by Django 5.1.3 on 2025-02-01 18:15

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creaed_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=10, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BodyType',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('name', models.CharField(max_length=1000)),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('name', models.CharField(max_length=200)),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('name', models.CharField(max_length=200)),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('title', models.CharField(max_length=200)),
                ('year', models.PositiveIntegerField()),
                ('condition', models.CharField(choices=[('New', 'New'), ('Used', 'Used')], default='used', max_length=20)),
                ('gear_type', models.CharField(default='Automatic', max_length=100)),
                ('fuel_type', models.CharField(choices=[('petrol', 'Petrol'), ('diesel', 'Diesel'), ('Electric', 'Electric'), ('Hybrid', 'Hybrid')], default='petrol', max_length=100)),
                ('mileage', models.CharField(max_length=200)),
                ('color', models.CharField(max_length=100)),
                ('seats', models.PositiveIntegerField()),
                ('picture', models.ImageField(blank=True, null=True, upload_to='car_images')),
                ('price_per_day', models.PositiveIntegerField()),
                ('price_per_week', models.PositiveIntegerField()),
                ('price_per_month', models.PositiveIntegerField()),
                ('stock_car', models.PositiveIntegerField(default=0)),
                ('disc_price', models.PositiveIntegerField(default=0)),
                ('description', models.TextField()),
                ('body', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to='store.bodytype')),
                ('brand_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='brands', to='store.brand')),
                ('category_objects', models.ManyToManyField(to='store.category')),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='CarBooking',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('fullname', models.CharField(max_length=100)),
                ('from_date', models.DateField()),
                ('to_date', models.DateField()),
                ('phone', models.CharField(max_length=15, unique=True)),
                ('email', models.EmailField(max_length=254)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('pickup_location', models.CharField(max_length=100)),
                ('special_request', models.TextField()),
                ('with_driver', models.CharField(choices=[('YES', 'YES'), ('NO', 'NO')], default='NO', max_length=50)),
                ('payment_method', models.CharField(choices=[('COD', 'COD'), ('ONLINE', 'ONLINE')], default='COD', max_length=15)),
                ('rzp_order_id', models.CharField(max_length=100)),
                ('is_order_placed', models.BooleanField(default=False)),
                ('is_paid', models.BooleanField(default=False)),
                ('total_payment', models.PositiveIntegerField()),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booking', to=settings.AUTH_USER_MODEL)),
                ('product_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='store.car')),
            ],
            bases=('store.basemodel',),
        ),
    ]
